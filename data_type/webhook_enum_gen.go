// Code generated by "go run myapp/tool/stringer -linecomment -type=WebhookTiktokOrderStatusChange -output=webhook_enum_gen.go -swagoutput=../tool/swag/enum_gen/webhook_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[WebhookTiktokOrderStatusChangeUnpaid-1]
	_ = x[WebhookTiktokOrderStatusChangeOnHold-2]
	_ = x[WebhookTiktokOrderStatusChangeAwaitingShipment-3]
	_ = x[WebhookTiktokOrderStatusChangeAwaitingCollection-4]
	_ = x[WebhookTiktokOrderStatusChangeAwaitingCancel-5]
	_ = x[WebhookTiktokOrderStatusChangeAwaitingInTransit-6]
	_ = x[WebhookTiktokOrderStatusChangeAwaitingDelivered-7]
	_ = x[WebhookTiktokOrderStatusChangeAwaitingCompleted-8]
}

const _WebhookTiktokOrderStatusChange_nameReadable = "UNPAID, ON_HOLD, AWAITING_SHIPMENT, AWAITING_COLLECTION, CANCEL, IN_TRANSIT, DELIVERED, COMPLETED"

const _WebhookTiktokOrderStatusChange_name = "UNPAIDON_HOLDAWAITING_SHIPMENTAWAITING_COLLECTIONCANCELIN_TRANSITDELIVEREDCOMPLETED"

var _WebhookTiktokOrderStatusChange_index = [...]uint8{0, 6, 13, 30, 49, 55, 65, 74, 83}

func (i *WebhookTiktokOrderStatusChange) Determine(s string) {
	switch s {
	case "UNPAID":
		*i = WebhookTiktokOrderStatusChangeUnpaid
	case "ON_HOLD":
		*i = WebhookTiktokOrderStatusChangeOnHold
	case "AWAITING_SHIPMENT":
		*i = WebhookTiktokOrderStatusChangeAwaitingShipment
	case "AWAITING_COLLECTION":
		*i = WebhookTiktokOrderStatusChangeAwaitingCollection
	case "CANCEL":
		*i = WebhookTiktokOrderStatusChangeAwaitingCancel
	case "IN_TRANSIT":
		*i = WebhookTiktokOrderStatusChangeAwaitingInTransit
	case "DELIVERED":
		*i = WebhookTiktokOrderStatusChangeAwaitingDelivered
	case "COMPLETED":
		*i = WebhookTiktokOrderStatusChangeAwaitingCompleted
	default:
		*i = 0
	}
}

func (i WebhookTiktokOrderStatusChange) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i WebhookTiktokOrderStatusChange) GetValidValuesString() string {
	return _WebhookTiktokOrderStatusChange_nameReadable
}

func (i WebhookTiktokOrderStatusChange) String() string {
	i -= 1
	if i < 0 || i >= WebhookTiktokOrderStatusChange(len(_WebhookTiktokOrderStatusChange_index)-1) {
		return "WebhookTiktokOrderStatusChange(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _WebhookTiktokOrderStatusChange_name[_WebhookTiktokOrderStatusChange_index[i]:_WebhookTiktokOrderStatusChange_index[i+1]]
}

func (i WebhookTiktokOrderStatusChange) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *WebhookTiktokOrderStatusChange) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.Determine(s)

	return nil
}

func (i *WebhookTiktokOrderStatusChange) UnmarshalText(b []byte) error {
	i.Determine(string(b))

	return nil
}

func (i *WebhookTiktokOrderStatusChange) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.Determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i WebhookTiktokOrderStatusChange) Value() (driver.Value, error) {
	return i.String(), nil
}

func WebhookTiktokOrderStatusChangeP(v WebhookTiktokOrderStatusChange) *WebhookTiktokOrderStatusChange {
	return &v
}

func ListWebhookTiktokOrderStatusChange() []WebhookTiktokOrderStatusChange {
	return []WebhookTiktokOrderStatusChange{
		WebhookTiktokOrderStatusChangeUnpaid,
		WebhookTiktokOrderStatusChangeOnHold,
		WebhookTiktokOrderStatusChangeAwaitingShipment,
		WebhookTiktokOrderStatusChangeAwaitingCollection,
		WebhookTiktokOrderStatusChangeAwaitingCancel,
		WebhookTiktokOrderStatusChangeAwaitingInTransit,
		WebhookTiktokOrderStatusChangeAwaitingDelivered,
		WebhookTiktokOrderStatusChangeAwaitingCompleted,
	}
}

func ListWebhookTiktokOrderStatusChangeString() []string {
	return []string{
		WebhookTiktokOrderStatusChangeUnpaid.String(),
		WebhookTiktokOrderStatusChangeOnHold.String(),
		WebhookTiktokOrderStatusChangeAwaitingShipment.String(),
		WebhookTiktokOrderStatusChangeAwaitingCollection.String(),
		WebhookTiktokOrderStatusChangeAwaitingCancel.String(),
		WebhookTiktokOrderStatusChangeAwaitingInTransit.String(),
		WebhookTiktokOrderStatusChangeAwaitingDelivered.String(),
		WebhookTiktokOrderStatusChangeAwaitingCompleted.String(),
	}
}
