// Code generated by "go run myapp/tool/stringer -linecomment -type=TransactionPaymentType -output=transaction_payment_enum_gen.go -swagoutput=../tool/swag/enum_gen/transaction_payment_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[TransactionPaymentTypeCash-1]
	_ = x[TransactionPaymentTypeBcaTransfer-2]
}

const _TransactionPaymentType_nameReadable = "CASH, BCA_TRANSFER"

const _TransactionPaymentType_name = "CASHBCA_TRANSFER"

var _TransactionPaymentType_index = [...]uint8{0, 4, 16}

func (i *TransactionPaymentType) Determine(s string) {
	switch s {
	case "CASH":
		*i = TransactionPaymentTypeCash
	case "BCA_TRANSFER":
		*i = TransactionPaymentTypeBcaTransfer
	default:
		*i = 0
	}
}

func (i TransactionPaymentType) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i TransactionPaymentType) GetValidValuesString() string {
	return _TransactionPaymentType_nameReadable
}

func (i TransactionPaymentType) String() string {
	i -= 1
	if i < 0 || i >= TransactionPaymentType(len(_TransactionPaymentType_index)-1) {
		return "TransactionPaymentType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _TransactionPaymentType_name[_TransactionPaymentType_index[i]:_TransactionPaymentType_index[i+1]]
}

func (i TransactionPaymentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *TransactionPaymentType) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.Determine(s)

	return nil
}

func (i *TransactionPaymentType) UnmarshalText(b []byte) error {
	i.Determine(string(b))

	return nil
}

func (i *TransactionPaymentType) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.Determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i TransactionPaymentType) Value() (driver.Value, error) {
	return i.String(), nil
}

func TransactionPaymentTypeP(v TransactionPaymentType) *TransactionPaymentType {
	return &v
}

func ListTransactionPaymentType() []TransactionPaymentType {
	return []TransactionPaymentType{
		TransactionPaymentTypeCash,
		TransactionPaymentTypeBcaTransfer,
	}
}

func ListTransactionPaymentTypeString() []string {
	return []string{
		TransactionPaymentTypeCash.String(),
		TransactionPaymentTypeBcaTransfer.String(),
	}
}
