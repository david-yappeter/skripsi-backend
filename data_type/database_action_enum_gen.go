// Code generated by "go run myapp/tool/stringer -linecomment -type=DatabaseAction -output=database_action_enum_gen.go -swagoutput=../tool/swag/enum_gen/database_action_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DatabaseActionInsert-1]
	_ = x[DatabaseActionUpdate-2]
	_ = x[DatabaseActionDelete-3]
}

const _DatabaseAction_nameReadable = "INSERT, UPDATE, DELETE"

const _DatabaseAction_name = "INSERTUPDATEDELETE"

var _DatabaseAction_index = [...]uint8{0, 6, 12, 18}

func (i *DatabaseAction) Determine(s string) {
	switch s {
	case "INSERT":
		*i = DatabaseActionInsert
	case "UPDATE":
		*i = DatabaseActionUpdate
	case "DELETE":
		*i = DatabaseActionDelete
	default:
		*i = 0
	}
}

func (i DatabaseAction) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i DatabaseAction) GetValidValuesString() string {
	return _DatabaseAction_nameReadable
}

func (i DatabaseAction) String() string {
	i -= 1
	if i < 0 || i >= DatabaseAction(len(_DatabaseAction_index)-1) {
		return "DatabaseAction(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _DatabaseAction_name[_DatabaseAction_index[i]:_DatabaseAction_index[i+1]]
}

func (i DatabaseAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *DatabaseAction) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.Determine(s)

	return nil
}

func (i *DatabaseAction) UnmarshalText(b []byte) error {
	i.Determine(string(b))

	return nil
}

func (i *DatabaseAction) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.Determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i DatabaseAction) Value() (driver.Value, error) {
	return i.String(), nil
}

func DatabaseActionP(v DatabaseAction) *DatabaseAction {
	return &v
}

func ListDatabaseAction() []DatabaseAction {
	return []DatabaseAction{
		DatabaseActionInsert,
		DatabaseActionUpdate,
		DatabaseActionDelete,
	}
}

func ListDatabaseActionString() []string {
	return []string{
		DatabaseActionInsert.String(),
		DatabaseActionUpdate.String(),
		DatabaseActionDelete.String(),
	}
}
