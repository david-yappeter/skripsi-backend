// Code generated by "go run myapp/tool/stringer -linecomment -type=ProductReceiveStatus -output=product_receive_enum_gen.go -swagoutput=../tool/swag/enum_gen/product_receive_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ProductReceiveStatusPending-1]
	_ = x[ProductReceiveStatusCompleted-2]
}

const _ProductReceiveStatus_nameReadable = "PENDING, COMPLETED"

const _ProductReceiveStatus_name = "PENDINGCOMPLETED"

var _ProductReceiveStatus_index = [...]uint8{0, 7, 16}

func (i *ProductReceiveStatus) determine(s string) {
	switch s {
	case "PENDING":
		*i = ProductReceiveStatusPending
	case "COMPLETED":
		*i = ProductReceiveStatusCompleted
	default:
		*i = 0
	}
}

func (i ProductReceiveStatus) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i ProductReceiveStatus) GetValidValuesString() string {
	return _ProductReceiveStatus_nameReadable
}

func (i ProductReceiveStatus) String() string {
	i -= 1
	if i < 0 || i >= ProductReceiveStatus(len(_ProductReceiveStatus_index)-1) {
		return "ProductReceiveStatus(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _ProductReceiveStatus_name[_ProductReceiveStatus_index[i]:_ProductReceiveStatus_index[i+1]]
}

func (i ProductReceiveStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *ProductReceiveStatus) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.determine(s)

	return nil
}

func (i *ProductReceiveStatus) UnmarshalText(b []byte) error {
	i.determine(string(b))

	return nil
}

func (i *ProductReceiveStatus) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i ProductReceiveStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func ProductReceiveStatusP(v ProductReceiveStatus) *ProductReceiveStatus {
	return &v
}

func ListProductReceiveStatus() []ProductReceiveStatus {
	return []ProductReceiveStatus{
		ProductReceiveStatusPending,
		ProductReceiveStatusCompleted,
	}
}

func ListProductReceiveStatusString() []string {
	return []string{
		ProductReceiveStatusPending.String(),
		ProductReceiveStatusCompleted.String(),
	}
}
