// Code generated by "go run myapp/tool/stringer -linecomment -type=CashierSessionStatus -output=cashier_session_enum_gen.go -swagoutput=../tool/swag/enum_gen/cashier_session_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CashierSessionStatusActive-1]
	_ = x[CashierSessionStatusCompleted-2]
}

const _CashierSessionStatus_nameReadable = "ACTIVE, COMPLETED"

const _CashierSessionStatus_name = "ACTIVECOMPLETED"

var _CashierSessionStatus_index = [...]uint8{0, 6, 15}

func (i *CashierSessionStatus) determine(s string) {
	switch s {
	case "ACTIVE":
		*i = CashierSessionStatusActive
	case "COMPLETED":
		*i = CashierSessionStatusCompleted
	default:
		*i = 0
	}
}

func (i CashierSessionStatus) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i CashierSessionStatus) GetValidValuesString() string {
	return _CashierSessionStatus_nameReadable
}

func (i CashierSessionStatus) String() string {
	i -= 1
	if i < 0 || i >= CashierSessionStatus(len(_CashierSessionStatus_index)-1) {
		return "CashierSessionStatus(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _CashierSessionStatus_name[_CashierSessionStatus_index[i]:_CashierSessionStatus_index[i+1]]
}

func (i CashierSessionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CashierSessionStatus) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.determine(s)

	return nil
}

func (i *CashierSessionStatus) UnmarshalText(b []byte) error {
	i.determine(string(b))

	return nil
}

func (i *CashierSessionStatus) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i CashierSessionStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func CashierSessionStatusP(v CashierSessionStatus) *CashierSessionStatus {
	return &v
}

func ListCashierSessionStatus() []CashierSessionStatus {
	return []CashierSessionStatus{
		CashierSessionStatusActive,
		CashierSessionStatusCompleted,
	}
}

func ListCashierSessionStatusString() []string {
	return []string{
		CashierSessionStatusActive.String(),
		CashierSessionStatusCompleted.String(),
	}
}
