// Code generated by "go run myapp/tool/stringer -linecomment -type=PermissionType -output=permission_type_enum_gen.go -swagoutput=../tool/swag/enum_gen/permission_type_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[PermissionTypeAdmin-1]
	_ = x[PermissionTypeGlobal-2]
	_ = x[PermissionTypeMustAssign-3]
	_ = x[PermissionTypeMustOnSite-4]
	_ = x[PermissionTypeMustAssignAndOnSite-5]
	_ = x[PermissionTypeMustAssignAndOnSiteStrict-6]
}

const _PermissionType_nameReadable = "ADMIN, GLOBAL, MUST_ASSIGN, MUST_ON_SITE, MUST_ASSIGN_AND_ON_SITE, MUST_ASSIGN_AND_ON_SITE_STRICT"

const _PermissionType_name = "ADMINGLOBALMUST_ASSIGNMUST_ON_SITEMUST_ASSIGN_AND_ON_SITEMUST_ASSIGN_AND_ON_SITE_STRICT"

var _PermissionType_index = [...]uint8{0, 5, 11, 22, 34, 57, 87}

func (i *PermissionType) determine(s string) {
	switch s {
	case "ADMIN":
		*i = PermissionTypeAdmin
	case "GLOBAL":
		*i = PermissionTypeGlobal
	case "MUST_ASSIGN":
		*i = PermissionTypeMustAssign
	case "MUST_ON_SITE":
		*i = PermissionTypeMustOnSite
	case "MUST_ASSIGN_AND_ON_SITE":
		*i = PermissionTypeMustAssignAndOnSite
	case "MUST_ASSIGN_AND_ON_SITE_STRICT":
		*i = PermissionTypeMustAssignAndOnSiteStrict
	default:
		*i = 0
	}
}

func (i PermissionType) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i PermissionType) GetValidValuesString() string {
	return _PermissionType_nameReadable
}

func (i PermissionType) String() string {
	i -= 1
	if i < 0 || i >= PermissionType(len(_PermissionType_index)-1) {
		return "PermissionType(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _PermissionType_name[_PermissionType_index[i]:_PermissionType_index[i+1]]
}

func (i PermissionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *PermissionType) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.determine(s)

	return nil
}

func (i *PermissionType) UnmarshalText(b []byte) error {
	i.determine(string(b))

	return nil
}

func (i *PermissionType) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i PermissionType) Value() (driver.Value, error) {
	return i.String(), nil
}

func PermissionTypeP(v PermissionType) *PermissionType {
	return &v
}

func ListPermissionType() []PermissionType {
	return []PermissionType{
		PermissionTypeAdmin,
		PermissionTypeGlobal,
		PermissionTypeMustAssign,
		PermissionTypeMustOnSite,
		PermissionTypeMustAssignAndOnSite,
		PermissionTypeMustAssignAndOnSiteStrict,
	}
}

func ListPermissionTypeString() []string {
	return []string{
		PermissionTypeAdmin.String(),
		PermissionTypeGlobal.String(),
		PermissionTypeMustAssign.String(),
		PermissionTypeMustOnSite.String(),
		PermissionTypeMustAssignAndOnSite.String(),
		PermissionTypeMustAssignAndOnSiteStrict.String(),
	}
}
