// Code generated by "go run myapp/tool/stringer -linecomment -type=DebtStatus,DebtDebtSource -output=debt_enum_gen.go -swagoutput=../tool/swag/enum_gen/debt_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DebtStatusUnpaid-1]
	_ = x[DebtStatusCanceled-2]
	_ = x[DebtStatusPaid-3]
}

const _DebtStatus_nameReadable = "UNPAID, CANCELED, PAID"

const _DebtStatus_name = "UNPAIDCANCELEDPAID"

var _DebtStatus_index = [...]uint8{0, 6, 14, 18}

func (i *DebtStatus) Determine(s string) {
	switch s {
	case "UNPAID":
		*i = DebtStatusUnpaid
	case "CANCELED":
		*i = DebtStatusCanceled
	case "PAID":
		*i = DebtStatusPaid
	default:
		*i = 0
	}
}

func (i DebtStatus) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i DebtStatus) GetValidValuesString() string {
	return _DebtStatus_nameReadable
}

func (i DebtStatus) String() string {
	i -= 1
	if i < 0 || i >= DebtStatus(len(_DebtStatus_index)-1) {
		return "DebtStatus(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _DebtStatus_name[_DebtStatus_index[i]:_DebtStatus_index[i+1]]
}

func (i DebtStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *DebtStatus) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.Determine(s)

	return nil
}

func (i *DebtStatus) UnmarshalText(b []byte) error {
	i.Determine(string(b))

	return nil
}

func (i *DebtStatus) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.Determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i DebtStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func DebtStatusP(v DebtStatus) *DebtStatus {
	return &v
}

func ListDebtStatus() []DebtStatus {
	return []DebtStatus{
		DebtStatusUnpaid,
		DebtStatusCanceled,
		DebtStatusPaid,
	}
}

func ListDebtStatusString() []string {
	return []string{
		DebtStatusUnpaid.String(),
		DebtStatusCanceled.String(),
		DebtStatusPaid.String(),
	}
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[DebtDebtSourceDeliveryOrder-1]
}

const _DebtDebtSource_nameReadable = "DELIVERY_ORDER"

const _DebtDebtSource_name = "DELIVERY_ORDER"

var _DebtDebtSource_index = [...]uint8{0, 14}

func (i *DebtDebtSource) Determine(s string) {
	switch s {
	case "DELIVERY_ORDER":
		*i = DebtDebtSourceDeliveryOrder
	default:
		*i = 0
	}
}

func (i DebtDebtSource) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i DebtDebtSource) GetValidValuesString() string {
	return _DebtDebtSource_nameReadable
}

func (i DebtDebtSource) String() string {
	i -= 1
	if i < 0 || i >= DebtDebtSource(len(_DebtDebtSource_index)-1) {
		return "DebtDebtSource(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _DebtDebtSource_name[_DebtDebtSource_index[i]:_DebtDebtSource_index[i+1]]
}

func (i DebtDebtSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *DebtDebtSource) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.Determine(s)

	return nil
}

func (i *DebtDebtSource) UnmarshalText(b []byte) error {
	i.Determine(string(b))

	return nil
}

func (i *DebtDebtSource) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.Determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i DebtDebtSource) Value() (driver.Value, error) {
	return i.String(), nil
}

func DebtDebtSourceP(v DebtDebtSource) *DebtDebtSource {
	return &v
}

func ListDebtDebtSource() []DebtDebtSource {
	return []DebtDebtSource{
		DebtDebtSourceDeliveryOrder,
	}
}

func ListDebtDebtSourceString() []string {
	return []string{
		DebtDebtSourceDeliveryOrder.String(),
	}
}
