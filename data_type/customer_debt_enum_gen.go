// Code generated by "go run myapp/tool/stringer -linecomment -type=CustomerDebtStatus,CustomerDebtDebtSource -output=customer_debt_enum_gen.go -swagoutput=../tool/swag/enum_gen/customer_debt_enum_gen.go -custom"; DO NOT EDIT.

package data_type

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CustomerDebtStatusUnpaid-1]
	_ = x[CustomerDebtStatusCanceled-2]
	_ = x[CustomerDebtStatusPaid-3]
}

const _CustomerDebtStatus_nameReadable = "UNPAID, CANCELED, PAID"

const _CustomerDebtStatus_name = "UNPAIDCANCELEDPAID"

var _CustomerDebtStatus_index = [...]uint8{0, 6, 14, 18}

func (i *CustomerDebtStatus) determine(s string) {
	switch s {
	case "UNPAID":
		*i = CustomerDebtStatusUnpaid
	case "CANCELED":
		*i = CustomerDebtStatusCanceled
	case "PAID":
		*i = CustomerDebtStatusPaid
	default:
		*i = 0
	}
}

func (i CustomerDebtStatus) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i CustomerDebtStatus) GetValidValuesString() string {
	return _CustomerDebtStatus_nameReadable
}

func (i CustomerDebtStatus) String() string {
	i -= 1
	if i < 0 || i >= CustomerDebtStatus(len(_CustomerDebtStatus_index)-1) {
		return "CustomerDebtStatus(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _CustomerDebtStatus_name[_CustomerDebtStatus_index[i]:_CustomerDebtStatus_index[i+1]]
}

func (i CustomerDebtStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CustomerDebtStatus) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.determine(s)

	return nil
}

func (i *CustomerDebtStatus) UnmarshalText(b []byte) error {
	i.determine(string(b))

	return nil
}

func (i *CustomerDebtStatus) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i CustomerDebtStatus) Value() (driver.Value, error) {
	return i.String(), nil
}

func CustomerDebtStatusP(v CustomerDebtStatus) *CustomerDebtStatus {
	return &v
}

func ListCustomerDebtStatus() []CustomerDebtStatus {
	return []CustomerDebtStatus{
		CustomerDebtStatusUnpaid,
		CustomerDebtStatusCanceled,
		CustomerDebtStatusPaid,
	}
}

func ListCustomerDebtStatusString() []string {
	return []string{
		CustomerDebtStatusUnpaid.String(),
		CustomerDebtStatusCanceled.String(),
		CustomerDebtStatusPaid.String(),
	}
}

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CustomerDebtDebtSourceDeliveryOrder-1]
}

const _CustomerDebtDebtSource_nameReadable = "DELIVERY_ORDER"

const _CustomerDebtDebtSource_name = "DELIVERY_ORDER"

var _CustomerDebtDebtSource_index = [...]uint8{0, 14}

func (i *CustomerDebtDebtSource) determine(s string) {
	switch s {
	case "DELIVERY_ORDER":
		*i = CustomerDebtDebtSourceDeliveryOrder
	default:
		*i = 0
	}
}

func (i CustomerDebtDebtSource) IsValid() bool {
	if i == 0 {
		return false
	}

	return true
}

func (i CustomerDebtDebtSource) GetValidValuesString() string {
	return _CustomerDebtDebtSource_nameReadable
}

func (i CustomerDebtDebtSource) String() string {
	i -= 1
	if i < 0 || i >= CustomerDebtDebtSource(len(_CustomerDebtDebtSource_index)-1) {
		return "CustomerDebtDebtSource(" + strconv.FormatInt(int64(i+1), 10) + ")"
	}

	return _CustomerDebtDebtSource_name[_CustomerDebtDebtSource_index[i]:_CustomerDebtDebtSource_index[i+1]]
}

func (i CustomerDebtDebtSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

func (i *CustomerDebtDebtSource) UnmarshalJSON(b []byte) error {
	var s string
	if err := json.Unmarshal(b, &s); err != nil {
		return err
	}

	i.determine(s)

	return nil
}

func (i *CustomerDebtDebtSource) UnmarshalText(b []byte) error {
	i.determine(string(b))

	return nil
}

func (i *CustomerDebtDebtSource) Scan(value interface{}) error {
	switch s := value.(type) {
	case string:
		i.determine(s)
	default:
		return fmt.Errorf("unsupported Scan, storing driver.Value type %T into type %T", value, i)
	}

	return nil
}

func (i CustomerDebtDebtSource) Value() (driver.Value, error) {
	return i.String(), nil
}

func CustomerDebtDebtSourceP(v CustomerDebtDebtSource) *CustomerDebtDebtSource {
	return &v
}

func ListCustomerDebtDebtSource() []CustomerDebtDebtSource {
	return []CustomerDebtDebtSource{
		CustomerDebtDebtSourceDeliveryOrder,
	}
}

func ListCustomerDebtDebtSourceString() []string {
	return []string{
		CustomerDebtDebtSourceDeliveryOrder.String(),
	}
}
