// Code generated by hero.
// source: /home/author/go/clinic-backend/internal/pdf/template/price_tag/price_tag.html
// DO NOT EDIT!
package pdf

import (
	"bytes"

	"github.com/shiyanhui/hero"
)

func PriceTagHTML(param PriceTagPdfParam, buffer *bytes.Buffer) {
	buffer.WriteString(`<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>GWS Medika - Price Tags</title>
    <style>
      :root {
        --color-black: #1a1c1f;
        --color-warning: #fb9a22;

        --font-size-base: 12px;
        --font-size-lg: 26px;

        --padding: 8px;
      }

      @page {
        size: A4;
        orientation: portrait;
        margin: 0.9cm 2cm;
      }

      * {
        box-sizing: border-box;
      }

      html,
      body {
        height: 100%;
        width: 100%;
        margin: 0;
        padding: 0;
        left: 0;
        top: 0;
      }

      body {
        font-family: arial, sans-serif;
        font-size: var(--font-size-base);
        font-weight: var(--font-weight-normal);
        color: var(--color-black);
        letter-spacing: -0.25px;
      }

      .container {
        display: flex;
        flex-wrap: wrap;
      }

      .label {
        width: 5.5cm;
        height: 3.1cm;
        padding: var(--padding) 0;
        display: flex;
        flex-direction: column;
        gap: 3px;
        position: relative;
        page-break-inside: avoid;
        break-inside: avoid-column;
        border: 1px solid rgb(213, 213, 213);
      }

      .label--container {
        padding: 0 var(--padding);
        display: flex;
      }

      .label--title {
        --line-height: 12px;
        font-size: var(--font-size-base);
        line-height: var(--line-height);
        font-weight: 500;
        text-transform: uppercase;
        height: calc(var(--line-height) * 2);

        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      .label--price-container {
        display: flex;
        padding: 0 var(--padding);
      }

      .sale .label--price-container {
        background-color: var(--color-warning);
      }

      .label--price {
        position: relative;
        font-size: var(--font-size-lg);
        font-weight: 500;
      }

      .label--unit {
        font-size: var(--font-size-base);
        font-weight: 400;
      }

      .label--price-currency {
        font-size: 8px;
        line-height: 8.57px;
        font-weight: 700px;
      }

      .label--sale-container {
        margin-left: 6px;
      }

      .label--sale-price {
        font-size: 10px;
        line-height: 11px;
        font-weight: 500;
        text-decoration: line-through;
      }

      .label--sale-label {
        font-size: 6px;
        line-height: 6px;
      }

      .label--barcode {
        width: 106px;
        height: 20px;
      }

      .label--barcode-container {
        margin-top: auto;
      }

      .label--barcode-text,
      .label--date {
        font-size: 8px;
        line-height: 8.57px;
        font-weight: 700px;
      }

      .label--barcode img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        object-position: left;
      }

      .label--footer {
        display: flex;
        justify-content: space-between;
      }

      .label--footer-barcode {
        display: flex;
        justify-content: space-between;
        width: 106px;
      }
    </style>
  </head>

  <body id="main">
    <div id="printarea">
      `)
	buffer.WriteString(` 
  <div class="container">
    `)
	for _, item := range param.Items {
		if param.IsYellowPaper {
			buffer.WriteString(`
        <div class="label">
          `)
			buffer.WriteString(`<div class="label--container">
  <div class="label--title">
    `)
			hero.EscapeHTML(item.Name, buffer)
			buffer.WriteString(`
  </div>
</div>

<div class="label--price-container">
  <div class="label--price-currency">Rp</div>
  <div class="label--price">`)
			hero.EscapeHTML(item.Price, buffer)
			buffer.WriteString(`<span class="label--unit"> / `)
			hero.EscapeHTML(item.UnitName, buffer)
			buffer.WriteString(`</span></div>
</div>

`)
			if item.StartPromotionPeriod != "" && item.EndPromotionPeriod != "" {
				buffer.WriteString(`
  <div class="label--container">
    <div class="label--sale-label">
      Periode Promosi : `)
				hero.EscapeHTML(item.StartPromotionPeriod, buffer)
				buffer.WriteString(` s.d. `)
				hero.EscapeHTML(item.EndPromotionPeriod, buffer)
				buffer.WriteString(`
    </div>
  </div>
`)
			}
			buffer.WriteString(`

<div class="label--container label--barcode-container">
  <div class="label--barcode">
    `)
			if item.BarcodeImage != "" {
				buffer.WriteString(`
      <img src="data:image/png;base64,`)
				hero.EscapeHTML(item.BarcodeImage, buffer)
				buffer.WriteString(`"" />
    `)
			}
			buffer.WriteString(`
  </div>

  `)
			if item.NormalPrice != "" {
				buffer.WriteString(`
    <div class="label--sale-container">
      <div class="label--sale-label">Harga Normal</div>
      <div class="label--sale-price">Rp `)
				hero.EscapeHTML(item.NormalPrice, buffer)
				buffer.WriteString(` </div>
    </div>
  `)
			}
			buffer.WriteString(`
</div>

<div class="label--container label--footer">
  <div class="label--footer-barcode">
    `)
			if item.Barcode != "" {
				buffer.WriteString(`
      <div class="label--barcode-text">`)
				hero.EscapeHTML(item.Barcode, buffer)
				buffer.WriteString(`</div>
    `)
			}
			buffer.WriteString(`
    <div class="label--barcode-text">`)
			hero.EscapeHTML(item.Code, buffer)
			buffer.WriteString(`</div>
  </div>

  <div class="label--date">`)
			hero.EscapeHTML(item.PrintDate, buffer)
			buffer.WriteString(`</div>
</div>`)
			buffer.WriteString(`
        </div>
      `)
		} else {
			if item.HasPromotion {
				buffer.WriteString(`
          <div class="label sale">
            `)
				buffer.WriteString(`<div class="label--container">
  <div class="label--title">
    `)
				hero.EscapeHTML(item.Name, buffer)
				buffer.WriteString(`
  </div>
</div>

<div class="label--price-container">
  <div class="label--price-currency">Rp</div>
  <div class="label--price">`)
				hero.EscapeHTML(item.Price, buffer)
				buffer.WriteString(`<span class="label--unit"> / `)
				hero.EscapeHTML(item.UnitName, buffer)
				buffer.WriteString(`</span></div>
</div>

`)
				if item.StartPromotionPeriod != "" && item.EndPromotionPeriod != "" {
					buffer.WriteString(`
  <div class="label--container">
    <div class="label--sale-label">
      Periode Promosi : `)
					hero.EscapeHTML(item.StartPromotionPeriod, buffer)
					buffer.WriteString(` s.d. `)
					hero.EscapeHTML(item.EndPromotionPeriod, buffer)
					buffer.WriteString(`
    </div>
  </div>
`)
				}
				buffer.WriteString(`

<div class="label--container label--barcode-container">
  <div class="label--barcode">
    `)
				if item.BarcodeImage != "" {
					buffer.WriteString(`
      <img src="data:image/png;base64,`)
					hero.EscapeHTML(item.BarcodeImage, buffer)
					buffer.WriteString(`"" />
    `)
				}
				buffer.WriteString(`
  </div>

  `)
				if item.NormalPrice != "" {
					buffer.WriteString(`
    <div class="label--sale-container">
      <div class="label--sale-label">Harga Normal</div>
      <div class="label--sale-price">Rp `)
					hero.EscapeHTML(item.NormalPrice, buffer)
					buffer.WriteString(` </div>
    </div>
  `)
				}
				buffer.WriteString(`
</div>

<div class="label--container label--footer">
  <div class="label--footer-barcode">
    `)
				if item.Barcode != "" {
					buffer.WriteString(`
      <div class="label--barcode-text">`)
					hero.EscapeHTML(item.Barcode, buffer)
					buffer.WriteString(`</div>
    `)
				}
				buffer.WriteString(`
    <div class="label--barcode-text">`)
				hero.EscapeHTML(item.Code, buffer)
				buffer.WriteString(`</div>
  </div>

  <div class="label--date">`)
				hero.EscapeHTML(item.PrintDate, buffer)
				buffer.WriteString(`</div>
</div>`)
				buffer.WriteString(`
          </div>
        `)
			} else {
				buffer.WriteString(`
          <div class="label">
            `)
				buffer.WriteString(`<div class="label--container">
  <div class="label--title">
    `)
				hero.EscapeHTML(item.Name, buffer)
				buffer.WriteString(`
  </div>
</div>

<div class="label--price-container">
  <div class="label--price-currency">Rp</div>
  <div class="label--price">`)
				hero.EscapeHTML(item.Price, buffer)
				buffer.WriteString(`<span class="label--unit"> / `)
				hero.EscapeHTML(item.UnitName, buffer)
				buffer.WriteString(`</span></div>
</div>

`)
				if item.StartPromotionPeriod != "" && item.EndPromotionPeriod != "" {
					buffer.WriteString(`
  <div class="label--container">
    <div class="label--sale-label">
      Periode Promosi : `)
					hero.EscapeHTML(item.StartPromotionPeriod, buffer)
					buffer.WriteString(` s.d. `)
					hero.EscapeHTML(item.EndPromotionPeriod, buffer)
					buffer.WriteString(`
    </div>
  </div>
`)
				}
				buffer.WriteString(`

<div class="label--container label--barcode-container">
  <div class="label--barcode">
    `)
				if item.BarcodeImage != "" {
					buffer.WriteString(`
      <img src="data:image/png;base64,`)
					hero.EscapeHTML(item.BarcodeImage, buffer)
					buffer.WriteString(`"" />
    `)
				}
				buffer.WriteString(`
  </div>

  `)
				if item.NormalPrice != "" {
					buffer.WriteString(`
    <div class="label--sale-container">
      <div class="label--sale-label">Harga Normal</div>
      <div class="label--sale-price">Rp `)
					hero.EscapeHTML(item.NormalPrice, buffer)
					buffer.WriteString(` </div>
    </div>
  `)
				}
				buffer.WriteString(`
</div>

<div class="label--container label--footer">
  <div class="label--footer-barcode">
    `)
				if item.Barcode != "" {
					buffer.WriteString(`
      <div class="label--barcode-text">`)
					hero.EscapeHTML(item.Barcode, buffer)
					buffer.WriteString(`</div>
    `)
				}
				buffer.WriteString(`
    <div class="label--barcode-text">`)
				hero.EscapeHTML(item.Code, buffer)
				buffer.WriteString(`</div>
  </div>

  <div class="label--date">`)
				hero.EscapeHTML(item.PrintDate, buffer)
				buffer.WriteString(`</div>
</div>`)
				buffer.WriteString(`
          </div>
        `)
			}
		}
	}
	buffer.WriteString(`
  </div>
`)

	buffer.WriteString(`
    </div>
    <script src="https://unpkg.com/pagedjs/dist/paged.polyfill.js"></script>
  </body>
</html>
`)

}
